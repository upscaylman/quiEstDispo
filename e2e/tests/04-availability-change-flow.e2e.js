// @ts-nocheck
// Tests E2E - Parcours Changement de Disponibilit√© (MOYEN ‚Üí EXPERT)
// Teste les transitions d'√©tat de disponibilit√© et leur impact

const puppeteer = require('puppeteer');
const { E2EHelpers } = require('../utils/helpers');
const config = require('../config/puppeteer.config');

describe('üìç Parcours Changement de Disponibilit√© - EXPERT', () => {
  let browser;
  let page;
  let helpers;

  beforeAll(async () => {
    browser = await puppeteer.launch(config.launchOptions);
  });

  afterAll(async () => {
    if (browser) {
      await browser.close();
    }
  });

  beforeEach(async () => {
    page = await browser.newPage();
    helpers = new E2EHelpers(page);

    await helpers.setupPage();

    // Setup g√©olocalisation pour tous les tests
    await page.setGeolocation({ latitude: 48.8566, longitude: 2.3522 });
  });

  afterEach(async () => {
    if (page) {
      await page.close();
    }
  });

  describe('üöÄ D√©finir une disponibilit√©', () => {
    test(
      'doit permettre de d√©finir sa premi√®re disponibilit√©',
      async () => {
        await helpers.navigateTo('/');
        await helpers.login(
          config.testUsers.testUser1.phone,
          config.testUsers.testUser1.code
        );

        // V√©rifier l'√©tat initial (non disponible)
        await helpers.waitForText("Vous n'√™tes pas disponible");

        // Cliquer sur "D√©finir ma disponibilit√©"
        await helpers.clickElement(config.selectors.buttons.setAvailability);

        // V√©rifier l'ouverture du modal
        await helpers.waitForElement(config.selectors.modals.availability);

        // S√©lectionner une activit√© (caf√©)
        await helpers.clickElement(config.selectors.activities.coffee);

        // Optionnel : modifier la dur√©e
        const durationInput = await helpers.waitForElement(
          config.selectors.inputs.duration
        );
        if (durationInput) {
          await durationInput.clear();
          await durationInput.type('60'); // 1 heure
        }

        // Confirmer
        await helpers.clickElement(config.selectors.buttons.confirm);

        // V√©rifier le changement d'√©tat
        await helpers.waitForText('Vous √™tes disponible pour caf√©');
        await helpers.waitForElement(config.selectors.buttons.stopAvailability);

        await helpers.takeScreenshot('availability-set-successfully');
      },
      config.timeouts.test
    );

    test(
      'doit afficher le compte √† rebours de disponibilit√©',
      async () => {
        await helpers.navigateTo('/');
        await helpers.login(
          config.testUsers.testUser1.phone,
          config.testUsers.testUser1.code
        );

        // D√©finir une disponibilit√© de 30 minutes
        await helpers.clickElement(config.selectors.buttons.setAvailability);
        await helpers.waitForElement(config.selectors.modals.availability);
        await helpers.clickElement(config.selectors.activities.coffee);

        const durationInput = await helpers.waitForElement(
          config.selectors.inputs.duration
        );
        if (durationInput) {
          await durationInput.clear();
          await durationInput.type('30');
        }

        await helpers.clickElement(config.selectors.buttons.confirm);

        // V√©rifier l'affichage du compte √† rebours
        await helpers.waitForText(/\d{1,2}:\d{2}/); // Format MM:SS ou HH:MM

        // Attendre quelques secondes et v√©rifier la d√©cr√©mentation
        const initialTime = await page.$eval(
          config.selectors.countdown,
          el => el.textContent
        );

        await page.waitForTimeout(3000);

        const updatedTime = await page.$eval(
          config.selectors.countdown,
          el => el.textContent
        );

        // Le temps doit avoir diminu√©
        expect(updatedTime).not.toBe(initialTime);

        await helpers.takeScreenshot('countdown-active');
      },
      config.timeouts.test
    );

    test(
      "doit permettre de changer d'activit√© pendant la disponibilit√©",
      async () => {
        await helpers.navigateTo('/');
        await helpers.login(
          config.testUsers.testUser1.phone,
          config.testUsers.testUser1.code
        );

        // D√©finir une premi√®re disponibilit√© (caf√©)
        await helpers.clickElement(config.selectors.buttons.setAvailability);
        await helpers.waitForElement(config.selectors.modals.availability);
        await helpers.clickElement(config.selectors.activities.coffee);
        await helpers.clickElement(config.selectors.buttons.confirm);

        await helpers.waitForText('Vous √™tes disponible pour caf√©');
        await helpers.takeScreenshot('first-activity-set');

        // Changer d'activit√©
        await helpers.clickElement(config.selectors.buttons.changeActivity);
        await helpers.waitForElement(config.selectors.modals.availability);

        // S√©lectionner une nouvelle activit√© (lunch)
        await helpers.clickElement(config.selectors.activities.lunch);
        await helpers.clickElement(config.selectors.buttons.confirm);

        // V√©rifier le changement
        await helpers.waitForText('Vous √™tes disponible pour lunch');

        await helpers.takeScreenshot('activity-changed');
      },
      config.timeouts.test
    );
  });

  describe('‚èπÔ∏è Arr√™ter une disponibilit√©', () => {
    test(
      "doit permettre d'arr√™ter sa disponibilit√© manuellement",
      async () => {
        await helpers.navigateTo('/');
        await helpers.login(
          config.testUsers.testUser1.phone,
          config.testUsers.testUser1.code
        );

        // D√©finir une disponibilit√© d'abord
        await helpers.clickElement(config.selectors.buttons.setAvailability);
        await helpers.waitForElement(config.selectors.modals.availability);
        await helpers.clickElement(config.selectors.activities.coffee);
        await helpers.clickElement(config.selectors.buttons.confirm);

        await helpers.waitForText('Vous √™tes disponible pour caf√©');

        // Arr√™ter la disponibilit√©
        await helpers.clickElement(config.selectors.buttons.stopAvailability);

        // V√©rifier la confirmation
        await helpers.waitForElement(config.selectors.modals.confirmation);
        await helpers.waitForText('√ätes-vous s√ªr de vouloir arr√™ter');

        await helpers.clickElement(config.selectors.buttons.confirmStop);

        // V√©rifier le retour √† l'√©tat initial
        await helpers.waitForText("Vous n'√™tes pas disponible");
        await helpers.waitForElement(config.selectors.buttons.setAvailability);

        await helpers.takeScreenshot('availability-stopped');
      },
      config.timeouts.test
    );

    test(
      "doit g√©rer l'expiration automatique de la disponibilit√©",
      async () => {
        await helpers.navigateTo('/');
        await helpers.login(
          config.testUsers.testUser1.phone,
          config.testUsers.testUser1.code
        );

        // D√©finir une disponibilit√© tr√®s courte (1 minute pour le test)
        await helpers.clickElement(config.selectors.buttons.setAvailability);
        await helpers.waitForElement(config.selectors.modals.availability);
        await helpers.clickElement(config.selectors.activities.coffee);

        const durationInput = await helpers.waitForElement(
          config.selectors.inputs.duration
        );
        if (durationInput) {
          await durationInput.clear();
          await durationInput.type('1'); // 1 minute
        }

        await helpers.clickElement(config.selectors.buttons.confirm);

        await helpers.waitForText('Vous √™tes disponible pour caf√©');

        // Attendre l'expiration (acc√©l√©rer le temps si possible)
        // Pour le test, on peut simuler l'expiration via JavaScript
        await page.evaluate(() => {
          // Simuler l'expiration c√¥t√© client
          if (window.__availabilityTimer) {
            clearTimeout(window.__availabilityTimer);
            window.__availabilityTimer = setTimeout(() => {
              // D√©clencher l'expiration
              if (window.__handleAvailabilityExpired) {
                window.__handleAvailabilityExpired();
              }
            }, 1000);
          }
        });

        // Attendre la notification d'expiration
        await helpers.waitForText('Votre disponibilit√© a expir√©');
        await helpers.waitForText("Vous n'√™tes pas disponible");

        await helpers.takeScreenshot('availability-expired');
      },
      config.timeouts.test
    );
  });

  describe("üîÑ Transitions d'√©tat complexes", () => {
    test(
      'doit g√©rer les invitations pendant une disponibilit√© active',
      async () => {
        await helpers.navigateTo('/');
        await helpers.login(
          config.testUsers.testUser1.phone,
          config.testUsers.testUser1.code
        );

        // D√©finir une disponibilit√©
        await helpers.clickElement(config.selectors.buttons.setAvailability);
        await helpers.waitForElement(config.selectors.modals.availability);
        await helpers.clickElement(config.selectors.activities.coffee);
        await helpers.clickElement(config.selectors.buttons.confirm);

        await helpers.waitForText('Vous √™tes disponible pour caf√©');

        // Simuler la r√©ception d'une invitation
        await page.evaluate(() => {
          // Mock d'une notification d'invitation
          if (window.__mockNotification) {
            window.__mockNotification({
              type: 'invitation',
              from: 'Paul',
              activity: 'caf√©',
              message: 'Paul vous invite pour un caf√©',
            });
          }
        });

        // V√©rifier l'affichage de la notification
        await helpers.waitForText('Paul vous invite');

        // Accepter l'invitation
        await helpers.clickElement(config.selectors.buttons.acceptInvitation);

        // V√©rifier le changement d'√©tat
        await helpers.waitForText('Vous partagez votre position');

        await helpers.takeScreenshot('invitation-accepted-during-availability');
      },
      config.timeouts.test
    );

    test(
      "doit synchroniser l'√©tat entre onglets",
      async () => {
        await helpers.navigateTo('/');
        await helpers.login(
          config.testUsers.testUser1.phone,
          config.testUsers.testUser1.code
        );

        // D√©finir une disponibilit√© depuis l'onglet home
        await helpers.clickElement(config.selectors.buttons.setAvailability);
        await helpers.waitForElement(config.selectors.modals.availability);
        await helpers.clickElement(config.selectors.activities.coffee);
        await helpers.clickElement(config.selectors.buttons.confirm);

        await helpers.waitForText('Vous √™tes disponible pour caf√©');
        await helpers.takeScreenshot('availability-set-home-tab');

        // Naviguer vers l'onglet carte
        await helpers.selectTab('map');

        // V√©rifier que l'√©tat est synchronis√©
        await helpers.waitForElement(config.selectors.map.userMarker);
        // V√©rifier que le bouton disponibilit√© refl√®te l'√©tat actuel
        await helpers.waitForText('Arr√™ter ma disponibilit√©');

        await helpers.takeScreenshot('availability-synced-map-tab');

        // Arr√™ter depuis la carte
        await helpers.clickElement(config.selectors.buttons.stopAvailability);
        await helpers.waitForElement(config.selectors.modals.confirmation);
        await helpers.clickElement(config.selectors.buttons.confirmStop);

        // Retourner √† l'onglet home et v√©rifier la synchronisation
        await helpers.selectTab('home');
        await helpers.waitForText("Vous n'√™tes pas disponible");

        await helpers.takeScreenshot('availability-stopped-synced');
      },
      config.timeouts.test
    );
  });

  describe('üìä √âtats et indicateurs visuels', () => {
    test(
      'doit afficher les bons indicateurs pour chaque √©tat',
      async () => {
        await helpers.navigateTo('/');
        await helpers.login(
          config.testUsers.testUser1.phone,
          config.testUsers.testUser1.code
        );

        // √âtat initial - Non disponible
        await helpers.waitForElement(config.selectors.status.notAvailable);
        await helpers.takeScreenshot('status-not-available');

        // √âtat disponible
        await helpers.clickElement(config.selectors.buttons.setAvailability);
        await helpers.waitForElement(config.selectors.modals.availability);
        await helpers.clickElement(config.selectors.activities.coffee);
        await helpers.clickElement(config.selectors.buttons.confirm);

        await helpers.waitForElement(config.selectors.status.available);
        await helpers.takeScreenshot('status-available');

        // √âtat partage de position (simulation)
        await page.evaluate(() => {
          if (window.__setLocationSharing) {
            window.__setLocationSharing(true);
          }
        });

        await helpers.waitForElement(config.selectors.status.sharingLocation);
        await helpers.takeScreenshot('status-sharing-location');
      },
      config.timeouts.test
    );

    test(
      "doit afficher les notifications de changement d'√©tat",
      async () => {
        await helpers.navigateTo('/');
        await helpers.login(
          config.testUsers.testUser1.phone,
          config.testUsers.testUser1.code
        );

        // D√©finir disponibilit√© et v√©rifier la notification
        await helpers.clickElement(config.selectors.buttons.setAvailability);
        await helpers.waitForElement(config.selectors.modals.availability);
        await helpers.clickElement(config.selectors.activities.coffee);
        await helpers.clickElement(config.selectors.buttons.confirm);

        // V√©rifier la notification de succ√®s
        await helpers.waitForText('Disponibilit√© activ√©e');

        await helpers.takeScreenshot('notification-availability-set');

        // Arr√™ter et v√©rifier la notification
        await helpers.clickElement(config.selectors.buttons.stopAvailability);
        await helpers.waitForElement(config.selectors.modals.confirmation);
        await helpers.clickElement(config.selectors.buttons.confirmStop);

        await helpers.waitForText('Disponibilit√© arr√™t√©e');

        await helpers.takeScreenshot('notification-availability-stopped');
      },
      config.timeouts.test
    );
  });

  describe('üåê Gestion offline/online', () => {
    test(
      'doit g√©rer la d√©finition de disponibilit√© en mode offline',
      async () => {
        await helpers.navigateTo('/');
        await helpers.login(
          config.testUsers.testUser1.phone,
          config.testUsers.testUser1.code
        );

        // Passer en mode offline
        await page.setOfflineMode(true);

        // Essayer de d√©finir une disponibilit√©
        await helpers.clickElement(config.selectors.buttons.setAvailability);
        await helpers.waitForElement(config.selectors.modals.availability);
        await helpers.clickElement(config.selectors.activities.coffee);
        await helpers.clickElement(config.selectors.buttons.confirm);

        // V√©rifier le message d'erreur ou mode d√©grad√©
        await helpers.waitForText('Mode hors ligne');

        await helpers.takeScreenshot('availability-offline-mode');

        // Repasser en ligne et v√©rifier la synchronisation
        await page.setOfflineMode(false);
        await page.waitForTimeout(2000);

        // La disponibilit√© devrait se synchroniser automatiquement
        await helpers.waitForText('Synchronisation en cours');

        await helpers.takeScreenshot('availability-back-online');
      },
      config.timeouts.test
    );
  });
});

// Test E2E basique - V√©rification connectivit√© - PHASE 6
const puppeteer = require('puppeteer');
const config = require('../config/puppeteer.config');

describe('üîó E2E - Test connectivit√© basique', () => {
  let browser;
  let page;

  beforeAll(async () => {
    console.log('üöÄ Test de connectivit√© E2E...');
    browser = await puppeteer.launch(config.browser);
  });

  afterAll(async () => {
    if (browser) {
      await browser.close();
      console.log('üîö Test termin√©');
    }
  });

  beforeEach(async () => {
    page = await browser.newPage();
    await page.setViewport(config.browser.defaultViewport);
  });

  afterEach(async () => {
    if (page) {
      await page.close();
    }
  });

  describe('üåê Connectivit√© de base', () => {
    test("doit pouvoir acc√©der √† l'application", async () => {
      console.log("üß™ Test: Acc√®s √† l'application");

      try {
        // Naviguer vers l'application
        await page.goto(config.baseUrl, {
          waitUntil: 'networkidle0',
          timeout: config.timeouts.navigation,
        });

        // V√©rifier que la page se charge
        const title = await page.title();
        console.log(`üìÑ Titre de la page: "${title}"`);

        expect(title).toBeTruthy();
        expect(title.length).toBeGreaterThan(0);

        // Prendre une capture d'√©cran
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const screenshotPath = `e2e/screenshots/00-basic-connectivity-${timestamp}.png`;
        await page.screenshot({
          path: screenshotPath,
          fullPage: true,
        });
        console.log(`üì∏ Screenshot: ${screenshotPath}`);

        console.log('‚úÖ Application accessible');
      } catch (error) {
        console.error('‚ùå Erreur de connectivit√©:', error.message);
        throw error;
      }
    }, 30000);

    test("doit d√©tecter la pr√©sence d'√©l√©ments React", async () => {
      console.log('üß™ Test: D√©tection √©l√©ments React');

      await page.goto(config.baseUrl, {
        waitUntil: 'networkidle0',
        timeout: config.timeouts.navigation,
      });

      // Attendre qu'un √©l√©ment React soit pr√©sent
      try {
        await page.waitForSelector('#root', { timeout: 10000 });
        console.log('‚úÖ √âl√©ment #root trouv√©');

        // V√©rifier que du contenu est pr√©sent
        const content = await page.$eval('#root', el => el.innerHTML);
        expect(content.length).toBeGreaterThan(10);

        console.log('‚úÖ Contenu React d√©tect√©');
      } catch (error) {
        console.warn(
          '‚ö†Ô∏è √âl√©ment #root non trouv√© - application peut-√™tre pas encore charg√©e'
        );

        // Essayer avec un s√©lecteur plus g√©n√©ral
        const bodyContent = await page.$eval('body', el => el.innerHTML);
        expect(bodyContent.length).toBeGreaterThan(10);

        console.log('‚úÖ Contenu HTML de base d√©tect√©');
      }
    }, 30000);

    test('doit pouvoir √©couter les erreurs console', async () => {
      console.log('üß™ Test: √âcoute erreurs console');

      const consoleErrors = [];

      page.on('console', msg => {
        if (msg.type() === 'error') {
          consoleErrors.push(msg.text());
        }
      });

      await page.goto(config.baseUrl, {
        waitUntil: 'networkidle0',
        timeout: config.timeouts.navigation,
      });

      // Attendre un peu pour capturer d'√©ventuelles erreurs
      await page.waitForTimeout(3000);

      console.log(`üìä Erreurs console d√©tect√©es: ${consoleErrors.length}`);

      if (consoleErrors.length > 0) {
        console.log('‚ö†Ô∏è Erreurs console:', consoleErrors);
      }

      // Ne pas faire √©chouer le test s'il y a des erreurs console
      // (l'application peut fonctionner malgr√© des warnings)

      console.log('‚úÖ √âcoute des erreurs console op√©rationnelle');
    }, 30000);
  });
});

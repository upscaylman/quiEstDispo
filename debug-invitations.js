// Script de d√©bogage pour les invitations d'activit√©
// √Ä ex√©cuter dans la console du navigateur

console.log('üêõ D√âBOGAGE INVITATIONS - Script charg√©');

// Fonction pour d√©bugger les invitations
window.debugInvitations = async function () {
  console.log('üîç === D√âBUT D√âBOGAGE INVITATIONS ===');

  try {
    // 1. V√©rifier l'utilisateur connect√©
    const currentUser = firebase.auth().currentUser;
    if (!currentUser) {
      console.log('‚ùå Aucun utilisateur connect√©');
      return;
    }

    console.log('üë§ Utilisateur connect√©:', {
      uid: currentUser.uid,
      email: currentUser.email,
      name: currentUser.displayName,
    });

    // 2. R√©cup√©rer toutes les notifications
    console.log('üì• R√©cup√©ration des notifications...');
    const notifications = await firebase
      .firestore()
      .collection('notifications')
      .where('to', '==', currentUser.uid)
      .orderBy('createdAt', 'desc')
      .get();

    console.log(`üìä Total notifications trouv√©es: ${notifications.size}`);

    // 3. Filtrer les invitations d'activit√©
    const invitations = [];
    notifications.forEach(doc => {
      const data = doc.data();
      if (data.type === 'invitation') {
        invitations.push({
          id: doc.id,
          ...data,
        });
      }
    });

    console.log(`üéØ Invitations d'activit√© trouv√©es: ${invitations.length}`);

    // 4. Analyser chaque invitation
    invitations.forEach((invitation, index) => {
      console.log(`üìã Invitation ${index + 1}:`, {
        id: invitation.id,
        message: invitation.message,
        type: invitation.type,
        read: invitation.read,
        from: invitation.from,
        to: invitation.to,
        data: invitation.data,
        createdAt:
          invitation.createdAt?.toDate?.()?.toLocaleString() || 'Date invalide',
      });
    });

    // 5. V√©rifier les invitations dans Firestore
    console.log('üì® V√©rification des invitations Firestore...');
    const firestoreInvitations = await firebase
      .firestore()
      .collection('invitations')
      .where('toUserId', '==', currentUser.uid)
      .where('status', '==', 'pending')
      .get();

    console.log(
      `üì® Invitations Firestore pending: ${firestoreInvitations.size}`
    );

    firestoreInvitations.forEach(doc => {
      const data = doc.data();
      console.log('üì® Invitation Firestore:', {
        id: doc.id,
        fromUserId: data.fromUserId,
        toUserId: data.toUserId,
        activity: data.activity,
        status: data.status,
        createdAt:
          data.createdAt?.toDate?.()?.toLocaleString() || 'Date invalide',
      });
    });

    // 6. Tester la cr√©ation d'une invitation de test
    console.log('üß™ Test cr√©ation invitation...');
    const testFriends = await firebase
      .firestore()
      .collection('users')
      .where('friends', 'array-contains', currentUser.uid)
      .limit(1)
      .get();

    if (testFriends.size > 0) {
      const friend = testFriends.docs[0];
      console.log('üë• Ami trouv√© pour test:', friend.data().name);

      // Cr√©er une invitation de test
      const testInvitation = {
        fromUserId: currentUser.uid,
        toUserId: friend.id,
        activity: 'cafe',
        status: 'pending',
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
        expiresAt: new Date(Date.now() + 15 * 60 * 1000),
      };

      const invitationRef = await firebase
        .firestore()
        .collection('invitations')
        .add(testInvitation);

      console.log('‚úÖ Invitation test cr√©√©e:', invitationRef.id);

      // Cr√©er la notification correspondante
      const testNotification = {
        to: friend.id,
        from: currentUser.uid,
        type: 'invitation',
        message: `üéâ ${currentUser.displayName || 'Un ami'} vous invite pour Caf√©`,
        data: {
          activity: 'cafe',
          fromUserId: currentUser.uid,
          fromUserName: currentUser.displayName || 'Un ami',
          activityLabel: 'Caf√©',
          invitationId: invitationRef.id,
        },
        read: false,
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
      };

      const notificationRef = await firebase
        .firestore()
        .collection('notifications')
        .add(testNotification);

      console.log('‚úÖ Notification test cr√©√©e:', notificationRef.id);
    } else {
      console.log('‚ö†Ô∏è Aucun ami trouv√© pour cr√©er une invitation de test');
    }
  } catch (error) {
    console.error('‚ùå Erreur pendant le d√©bogage:', error);
  }

  console.log('üîç === FIN D√âBOGAGE INVITATIONS ===');
};

// Fonction pour cr√©er une invitation de test vers soi-m√™me
window.createTestInvitation = async function () {
  console.log('üß™ Cr√©ation invitation de test vers soi-m√™me...');

  try {
    const currentUser = firebase.auth().currentUser;
    if (!currentUser) {
      console.log('‚ùå Aucun utilisateur connect√©');
      return;
    }

    // Cr√©er une invitation vers soi-m√™me pour test
    const testInvitation = {
      fromUserId: 'test-user-123',
      toUserId: currentUser.uid,
      activity: 'cafe',
      status: 'pending',
      createdAt: firebase.firestore.FieldValue.serverTimestamp(),
      expiresAt: new Date(Date.now() + 15 * 60 * 1000),
    };

    const invitationRef = await firebase
      .firestore()
      .collection('invitations')
      .add(testInvitation);

    console.log('‚úÖ Invitation test cr√©√©e:', invitationRef.id);

    // Cr√©er la notification correspondante
    const testNotification = {
      to: currentUser.uid,
      from: 'test-user-123',
      type: 'invitation',
      message: `üéâ Test User vous invite pour Caf√©`,
      data: {
        activity: 'cafe',
        fromUserId: 'test-user-123',
        fromUserName: 'Test User',
        activityLabel: 'Caf√©',
        invitationId: invitationRef.id,
      },
      read: false,
      createdAt: firebase.firestore.FieldValue.serverTimestamp(),
    };

    const notificationRef = await firebase
      .firestore()
      .collection('notifications')
      .add(testNotification);

    console.log('‚úÖ Notification test cr√©√©e:', notificationRef.id);
    console.log(
      "üéØ Allez dans le centre de notifications pour voir l'invitation !"
    );
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation invitation test:', error);
  }
};

console.log(`
üöÄ COMMANDES DISPONIBLES:

1. debugInvitations() - Analyser toutes les invitations
2. createTestInvitation() - Cr√©er une invitation de test

Ex√©cutez ces fonctions dans la console pour d√©bugger.
`);
